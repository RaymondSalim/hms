name: Tag and Create Version Environment on Merge to Prod

on:
  pull_request:
    types: [closed]
    branches:
      - prod

jobs:
  tag_and_version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    concurrency:
      group: version-prod
      cancel-in-progress: false

    steps:
      # 1) Checkout repository without GITHUB_TOKEN creds (we'll use SSH)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: false

      # 2) Start ssh-agent and load deploy key
      - name: Start ssh-agent and add deploy key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DEPLOY_KEY }}

      # 3) Trust github.com's SSH host key
      - name: Add github.com to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t ed25519 github.com >> ~/.ssh/known_hosts

      # 4) Debug to confirm SSH auth works
      - name: Debug SSH auth
        env:
          GIT_SSH_COMMAND: "ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -o IdentitiesOnly=yes"
        run: |
          git remote set-url origin git@github.com:RaymondSalim/hms.git
          git remote -v
          ssh -T git@github.com || true

      # 5) Extract tag from PR title
      - name: Extract Tag from Title
        id: extract_tag
        shell: bash
        run: |
          title="${{ github.event.pull_request.title }}"
          if [[ "$title" =~ ^[Rr]elease[[:space:]]+(.+)$ ]]; then
            tag="${BASH_REMATCH[1]}"
            tag="${tag//[[:space:]]/}" # strip spaces
            echo "tag_name=$tag" >> "$GITHUB_ENV"
            echo "tag=$tag" >> "$GITHUB_OUTPUT"
            echo "Tag to create: $tag"
          else
            echo "PR title doesn't match 'Release <tag>' pattern. Skipping."
          fi

      # # 6) Create public/version.json
      # - name: Create public/version.json
      #   if: env.tag_name != ''
      #   run: |
      #     mkdir -p public
      #     printf '{\n  "version": "%s"\n}\n' "${{ steps.extract_tag.outputs.tag }}" > public/version.json
      #     echo "Created public/version.json:"
      #     cat public/version.json

      # # 7) Commit version.json (no-op if unchanged)
      # - name: Commit version.json
      #   if: env.tag_name != ''
      #   run: |
      #     git config user.email "action@github.com"
      #     git config user.name  "GitHub Action"
      #     git add public/version.json
      #     git commit -m "chore: set version to ${{ steps.extract_tag.outputs.tag }}" || echo "No changes to commit"

      # # 8) Push commit to prod
      # - name: Push commit to prod (SSH)
      #   if: env.tag_name != ''
      #   env:
      #     GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=yes -o IdentitiesOnly=yes"
      #   run: |
      #     git fetch origin prod
      #     if ! git diff --quiet origin/prod..HEAD; then
      #       git push origin HEAD:prod
      #     else
      #       echo "No new commit to push"
      #     fi

      # 9) Create tag (skip if exists) and push it
      - name: Create Tag (skip if exists)
        if: env.tag_name != ''
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=yes -o IdentitiesOnly=yes"
        run: |
          set -euo pipefail
          tag_name="${{ env.tag_name }}"
          git fetch --tags origin
          if git rev-parse -q --verify "refs/tags/${tag_name}" >/dev/null 2>&1 \
             || git ls-remote --exit-code --tags origin "${tag_name}" >/dev/null 2>&1; then
            echo "Tag '${tag_name}' already exists. Skipping tag creation."
            exit 0
          fi
          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "${tag_name}" -m "Release ${tag_name}"
          git push origin "${tag_name}"
