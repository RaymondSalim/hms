generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id          Int      @id @default(autoincrement())
  tenant_id   String?
  room_id     Int?
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  duration_id Int?
  status_id   Int?
  fee         Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  durations       Duration?      @relation(fields: [duration_id], references: [id], onUpdate: NoAction, onDelete: Restrict)
  rooms           Room?          @relation(fields: [room_id], references: [id], onUpdate: NoAction)
  bookingstatuses BookingStatus? @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  tenants         Tenant?        @relation(fields: [tenant_id], references: [id], onUpdate: NoAction)
  payments        Payment[]
  penalties       Penalty[]
  bills           Bill[]
  checkInOutLogs  CheckInOutLog[]

  @@map("bookings")
}

model BookingStatus {
  id        Int      @id @default(autoincrement())
  status    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  bookings Booking[]

  @@map("bookingstatuses")
}

model CheckInOutLog {
  id         Int      @id @default(autoincrement())
  booking_id Int
  event_type String   @db.VarChar(255) // e.g., "check_in", "check_out"
  event_date DateTime @db.Date
  tenant_id  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  bookings Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenant   Tenant? @relation(fields: [tenant_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("checkinoutlogs")
}

model Category {
  id        Int      @id @default(autoincrement())
  category  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  expenses Expense[]

  @@map("categories")
}

model Duration {
  id          Int      @id @default(autoincrement())
  duration    String   @db.VarChar(255)
  day_count Int?
  month_count Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  bookings          Booking[]
  roomtypedurations RoomTypeDuration[]

  @@map("durations")
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Decimal  @db.Decimal(10, 2)
  description String   @db.VarChar(255)
  date        DateTime @db.Date
  category_id Int?
  location_id Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  categories Category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  locations Location? @relation(fields: [location_id], references: [id], onUpdate: NoAction)

  @@map("expenses")
}

model Guest {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?  @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  tenant_id String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tenants Tenant @relation(fields: [tenant_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("guests")
}

model Log {
  id        Int       @id @default(autoincrement())
  site_user_id String
  action    String    @db.VarChar(255)
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  siteusers SiteUser  @relation(fields: [site_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("logs")
}

model Bill {
  id          Int      @id @default(autoincrement())
  booking_id  Int
  amount      Decimal  @db.Decimal(10, 2)
  description String   @db.VarChar(255)
  due_date    DateTime @db.Date
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  bookings    Booking       @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  paymentBills PaymentBill[]

  @@map("bills")
}

model Payment {
  id            Int      @id @default(autoincrement())
  booking_id    Int
  amount        Decimal  @db.Decimal(10, 2)
  payment_date  DateTime @db.Date
  payment_proof String?  @db.VarChar(255)
  status_id     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  bookings        Booking        @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  paymentstatuses PaymentStatus? @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  paymentBills PaymentBill[]

  @@map("payments")
}

model PaymentBill {
  payment_id Int
  bill_id    Int
  amount     Decimal @db.Decimal(10, 2)

  payment Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bill    Bill    @relation(fields: [bill_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([payment_id, bill_id])
  @@map("payment_bills")
}

model PaymentStatus {
  id        Int      @id @default(autoincrement())
  status    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  payments Payment[]

  @@map("paymentstatuses")
}

model Permission {
  id         Int      @id @default(autoincrement())
  permission String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  rolepermissions RolePermission[]

  @@map("permissions")
}

model Report {
  id           Int      @id @default(autoincrement())
  type         String   @db.VarChar(255)
  generated_at DateTime @db.Date
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@map("reports")
}

model RolePermission {
  role_id       Int
  permission_id Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  permissions Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, permission_id])
  @@map("rolepermissions")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  rolepermissions RolePermission[]
  siteusers SiteUser[]

  @@map("roles")
}

model Room {
  id           Int      @id @default(autoincrement())
  room_number String @db.VarChar(255)
  room_type_id Int?
  status_id    Int?
  location_id  Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  bookings     Booking[]
  roomtypes RoomType? @relation(fields: [room_type_id], references: [id], onUpdate: NoAction, onDelete: Restrict)
  roomstatuses RoomStatus? @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  locations    Location?   @relation(fields: [location_id], references: [id], onUpdate: NoAction)

  @@unique([room_number, location_id])
  @@map("rooms")
}

model RoomStatus {
  id        Int      @id @default(autoincrement())
  status    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  rooms Room[]

  @@map("roomstatuses")
}

model RoomTypeDuration {
  id              Int      @id @default(autoincrement())
  room_type_id    Int
  duration_id     Int
  location_id     Int
  suggested_price Decimal? @db.Decimal(12, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  durations Duration @relation(fields: [duration_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  roomtypes RoomType @relation(fields: [room_type_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  locations Location @relation(fields: [location_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@unique([room_type_id, duration_id, location_id])
  @@map("roomtypedurations")
}

model RoomType {
  id        Int      @id @default(autoincrement())
  type      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  rooms             Room[]
  roomtypedurations RoomTypeDuration[]

  @@map("roomtypes")
}

model Rule {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("rules")
}

model Setting {
  id            Int      @id @default(autoincrement())
  setting_key   String   @db.VarChar(255)
  setting_value String   @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  @@map("settings")
}

model SiteUser {
  id            String    @id @default(cuid())
  name String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role_id       Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts Account[]
  logs     Log[]
  sessions Session[]
  roles    Role?     @relation(fields: [role_id], references: [id], onUpdate: NoAction)

  @@map("siteusers")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  siteUser SiteUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  siteUser SiteUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Penalty {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(255)
  amount      Decimal  @db.Decimal(10, 2)
  booking_id  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  bookings Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("penalties")
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  address   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  rooms            Room[]
  expenses         Expense[]
  RoomTypeDuration RoomTypeDuration[]

  @@map("locations")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  email     String?  @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  bookings Booking[]
  guests   Guest[]
  checkInOutLogs CheckInOutLog[]

  @@map("tenants")
}
