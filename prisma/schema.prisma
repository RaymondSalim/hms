generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id                  Int      @id @default(autoincrement())
  tenant_id           String?
  room_id             Int?
  start_date          DateTime @db.Date
  end_date            DateTime @db.Date
  duration_id         Int?
  status_id           Int?
  fee                 Decimal  @db.Decimal(10, 2)
  deposit             Decimal? @db.Decimal(10, 2)
  second_resident_fee Decimal? @db.Decimal(10, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt

  durations       Duration?       @relation(fields: [duration_id], references: [id], onUpdate: NoAction, onDelete: Restrict)
  rooms           Room?           @relation(fields: [room_id], references: [id], onUpdate: NoAction)
  bookingstatuses BookingStatus?  @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  tenants         Tenant?         @relation(fields: [tenant_id], references: [id], onUpdate: NoAction)
  payments        Payment[]
  penalties       Penalty[]
  bills           Bill[]
  checkInOutLogs  CheckInOutLog[]
  addOns          BookingAddOn[]

  @@map("bookings")
}

model BookingStatus {
  id        Int      @id @default(autoincrement())
  status    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  bookings Booking[]

  @@map("bookingstatuses")
}

model CheckInOutLog {
  id         Int      @id @default(autoincrement())
  booking_id Int
  event_type String   @db.VarChar(255) // e.g., "check_in", "check_out"
  event_date DateTime @db.Date
  tenant_id  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  bookings Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenant   Tenant? @relation(fields: [tenant_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("checkinoutlogs")
}

model Category {
  id        Int      @id @default(autoincrement())
  category  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  expenses Expense[]

  @@map("categories")
}

model Duration {
  id          Int      @id @default(autoincrement())
  duration    String   @db.VarChar(255)
  month_count Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  bookings          Booking[]
  roomtypedurations RoomTypeDuration[]

  @@map("durations")
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Decimal  @db.Decimal(10, 2)
  description String   @db.VarChar(255)
  date        DateTime @db.Date
  category_id Int?
  location_id Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  categories Category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  locations  Location? @relation(fields: [location_id], references: [id], onUpdate: NoAction)

  @@map("expenses")
}

model Guest {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?  @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  tenant_id String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tenants Tenant @relation(fields: [tenant_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@map("guests")
}

model Log {
  id           Int       @id @default(autoincrement())
  site_user_id String
  action       String    @db.VarChar(255)
  timestamp    DateTime? @default(now()) @db.Timestamp(6)
  siteusers    SiteUser  @relation(fields: [site_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("logs")
}

model Bill {
  id          Int        @id @default(autoincrement())
  booking_id  Int
  description String     @db.VarChar(255)
  due_date    DateTime   @db.Date
  bill_item   BillItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt

  bookings     Booking       @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  paymentBills PaymentBill[]

  @@map("bills")
}

enum BillType {
  GENERATED
  CREATED
}

model BillItem {
  id                   Int      @id @default(autoincrement())
  bill_id              Int
  description          String   @db.VarChar(255)
  internal_description String?  @db.VarChar(255)
  type                 BillType @default(GENERATED)
  amount               Decimal  @db.Decimal(10, 2)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt

  bill Bill @relation(fields: [bill_id], references: [id], onDelete: Cascade)

  @@index([bill_id])
  @@map("bill_items")
}

model Payment {
  id            Int      @id @default(autoincrement())
  booking_id    Int
  amount        Decimal  @db.Decimal(10, 2)
  payment_date  DateTime @db.Date
  payment_proof String?  @db.VarChar(255)
  status_id     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  bookings        Booking        @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  paymentstatuses PaymentStatus? @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  paymentBills    PaymentBill[]

  @@map("payments")
}

model PaymentBill {
  id         Int     @id @default(autoincrement())
  payment_id Int
  bill_id    Int
  amount     Decimal @db.Decimal(10, 2)

  payment Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bill    Bill    @relation(fields: [bill_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payment_bills")
}

model PaymentStatus {
  id        Int      @id @default(autoincrement())
  status    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  payments Payment[]

  @@map("paymentstatuses")
}

model Permission {
  id         Int      @id @default(autoincrement())
  permission String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  rolepermissions RolePermission[]

  @@map("permissions")
}

model Report {
  id           Int      @id @default(autoincrement())
  type         String   @db.VarChar(255)
  generated_at DateTime @db.Date
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@map("reports")
}

model RolePermission {
  role_id       Int
  permission_id Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  permissions Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, permission_id])
  @@map("rolepermissions")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  rolepermissions RolePermission[]
  siteusers       SiteUser[]

  @@map("roles")
}

model Room {
  id           Int      @id @default(autoincrement())
  room_number  String   @db.VarChar(255)
  room_type_id Int?
  status_id    Int?
  location_id  Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  bookings     Booking[]
  roomtypes    RoomType?   @relation(fields: [room_type_id], references: [id], onUpdate: NoAction, onDelete: Restrict)
  roomstatuses RoomStatus? @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  locations    Location?   @relation(fields: [location_id], references: [id], onUpdate: NoAction)

  @@unique([room_number, location_id])
  @@map("rooms")
}

model RoomStatus {
  id        Int      @id @default(autoincrement())
  status    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  rooms Room[]

  @@map("roomstatuses")
}

model RoomTypeDuration {
  id              Int      @id @default(autoincrement())
  room_type_id    Int
  duration_id     Int
  location_id     Int
  suggested_price Decimal? @db.Decimal(12, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  durations Duration @relation(fields: [duration_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  roomtypes RoomType @relation(fields: [room_type_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  locations Location @relation(fields: [location_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@unique([room_type_id, duration_id, location_id])
  @@map("roomtypedurations")
}

model RoomType {
  id          Int      @id @default(autoincrement())
  type        String   @unique @db.VarChar(255)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  rooms             Room[]
  roomtypedurations RoomTypeDuration[]

  @@map("roomtypes")
}

model Rule {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("rules")
}

model Setting {
  id            Int      @id @default(autoincrement())
  setting_key   String   @unique @db.VarChar(255)
  setting_value String   @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  @@map("settings")
}

model SiteUser {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  shouldReset   Boolean   @default(false)
  image         String?
  role_id       Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts Account[]
  logs     Log[]
  sessions Session[]
  roles    Role?     @relation(fields: [role_id], references: [id], onUpdate: NoAction)

  @@map("siteusers")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  siteUser SiteUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  siteUser SiteUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Penalty {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(255)
  amount      Decimal  @db.Decimal(10, 2)
  booking_id  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  bookings Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("penalties")
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  address   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  rooms            Room[]
  expenses         Expense[]
  RoomTypeDuration RoomTypeDuration[]
  addOns           AddOn[]

  @@map("locations")
}

model Tenant {
  id                      String  @id @default(cuid())
  id_number               String  @db.VarChar(255)
  name                    String  @db.VarChar(255)
  email                   String? @db.VarChar(255)
  phone                   String? @db.VarChar(255)
  current_address         String? @db.Text()
  id_file                 String? @db.VarChar(512)
  emergency_contact_name  String? @db.VarChar(255)
  emergency_contact_phone String? @db.VarChar(255)
  referral_source         String? @db.Text()

  second_resident_id        String? @unique
  second_resident           Tenant? @relation("TenantSecondResident", fields: [second_resident_id], references: [id])
  second_resident_of        Tenant? @relation("TenantSecondResident")
  second_resident_name      String? @db.VarChar(255)
  second_resident_id_number String? @db.VarChar(255)
  second_resident_id_file   String? @db.VarChar(512)
  second_resident_phone     String? @db.VarChar(255)
  second_resident_email     String? @db.VarChar(255)
  second_resident_relation  String? @db.VarChar(255)
  family_certificate_file   String? @db.VarChar(512)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  bookings       Booking[]
  guests         Guest[]
  checkInOutLogs CheckInOutLog[]

  @@map("tenants")
}

model EmailLogs {
  id      Int     @id @default(autoincrement())
  status  String  @db.VarChar(255)
  to      String  @db.VarChar(255)
  from    String  @db.VarChar(255)
  subject String? @db.VarChar(255)
  payload String  @db.VarChar(4096)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("emaillogs")
}

model Event {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  start           DateTime
  end             DateTime?
  allDay          Boolean   @default(false)
  backgroundColor String?
  borderColor     String?
  textColor       String?
  recurring       Boolean   @default(false)
  extendedProps   Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("events")
}

model AddOn {
  id              String   @id @default(cuid())
  name            String
  description     String?
  requires_input  Boolean  @default(false)
  parent_addon_id String?
  location_id     Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  parentAddOn AddOn?         @relation("ParentAddOn", fields: [parent_addon_id], references: [id])
  children    AddOn[]        @relation("ParentAddOn")
  location    Location?      @relation(fields: [location_id], references: [id], onUpdate: NoAction)
  pricing     AddOnPricing[]
  bookings    BookingAddOn[]

  @@unique([name, location_id])
}

model AddOnPricing {
  id              String   @id @default(cuid())
  addon_id        String
  interval_start  Int
  interval_end    Int?
  price           Float
  is_full_payment Boolean  @default(false) // New field to indicate full payment
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  addOn AddOn @relation(fields: [addon_id], references: [id])
}

model BookingAddOn {
  id         String   @id @default(cuid())
  input      String?
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  booking_id Int
  addon_id   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  booking Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  addOn   AddOn   @relation(fields: [addon_id], references: [id], onDelete: Restrict)
}
