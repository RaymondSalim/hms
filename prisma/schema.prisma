generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id              Int              @id @default(autoincrement())
  user_id         String?
  room_id         Int?
  check_in        DateTime         @db.Date
  duration_id     Int?
  status_id       Int?
  fee             Decimal          @db.Decimal(10, 2)
  durations       Duration?      @relation(fields: [duration_id], references: [id], onUpdate: NoAction)
  rooms           Room?          @relation(fields: [room_id], references: [id], onUpdate: NoAction)
  bookingstatuses BookingStatus? @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  users           User?            @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  guestbookings   GuestBooking[]
  payments        Payment[]
  penalties       Penalty[]

  @@map("bookings")
}

model BookingStatus {
  id       Int        @id @default(autoincrement())
  status   String     @db.VarChar(255)
  bookings Booking[]

  @@map("bookingstatuses")
}

model Category {
  id       Int        @id @default(autoincrement())
  category String     @db.VarChar(255)
  expenses Expense[]

  @@map("categories")
}

model Duration {
  id                Int                 @id @default(autoincrement())
  duration          String              @db.VarChar(255)
  day_count         Int
  bookings          Booking[]
  roomtypedurations RoomTypeDuration[]

  @@map("durations")
}

model Expense {
  id          Int         @id @default(autoincrement())
  amount      Decimal     @db.Decimal(10, 2)
  description String      @db.VarChar(255)
  date        DateTime    @db.Date
  category_id Int?
  categories Category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)

  @@map("expenses")
}

model GuestBooking {
  guest_id   Int
  booking_id Int
  bookings Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  guests   Guest   @relation(fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([guest_id, booking_id])
  @@map("guestbookings")
}

model Guest {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  email         String?         @db.VarChar(255)
  phone         String?         @db.VarChar(255)
  guestbookings GuestBooking[]

  @@map("guests")
}

model Log {
  id        Int       @id @default(autoincrement())
  user_id   String
  action    String    @db.VarChar(255)
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  users     User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("logs")
}

model Payment {
  id              Int              @id @default(autoincrement())
  booking_id      Int
  amount          Decimal          @db.Decimal(10, 2)
  payment_date    DateTime         @db.Date
  payment_proof   String?          @db.VarChar(255)
  status_id       Int?
  bookings        Booking        @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  paymentstatuses PaymentStatus? @relation(fields: [status_id], references: [id], onUpdate: NoAction)

  @@map("payments")
}

model PaymentStatus {
  id       Int        @id @default(autoincrement())
  status   String     @db.VarChar(255)
  payments Payment[]

  @@map("paymentstatuses")
}

model Permission {
  id              Int               @id @default(autoincrement())
  permission      String            @db.VarChar(255)
  rolepermissions RolePermission[]

  @@map("permissions")
}

model Report {
  id           Int      @id @default(autoincrement())
  type         String   @db.VarChar(255)
  generated_at DateTime @db.Date
  content      String

  @@map("reports")
}

model RolePermission {
  role_id       Int
  permission_id Int
  permissions Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, permission_id])
  @@map("rolepermissions")
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String?           @db.VarChar(255)
  rolepermissions RolePermission[]
  users           User[]

  @@map("roles")
}

model Room {
  id           Int           @id @default(autoincrement())
  room_number  String        @unique @db.VarChar(255)
  room_type_id Int?
  status_id    Int?
  bookings     Booking[]
  roomtypes    RoomType?   @relation(fields: [room_type_id], references: [id], onUpdate: NoAction)
  roomstatuses RoomStatus? @relation(fields: [status_id], references: [id], onUpdate: NoAction)

  @@map("rooms")
}

model RoomStatus {
  id     Int     @id @default(autoincrement())
  status String  @db.VarChar(255)
  rooms Room[]

  @@map("roomstatuses")
}

model RoomTypeDuration {
  id              Int       @id @default(autoincrement())
  room_type_id    Int
  duration_id     Int
  suggested_price Decimal   @db.Decimal(10, 2)
  durations Duration @relation(fields: [duration_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roomtypes RoomType @relation(fields: [room_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("roomtypedurations")
}

model RoomType {
  id                Int                 @id @default(autoincrement())
  type              String              @db.VarChar(255)
  rooms             Room[]
  roomtypedurations RoomTypeDuration[]

  @@map("roomtypes")
}

model Rule {
  id          Int    @id @default(autoincrement())
  description String

  @@map("rules")
}

model Setting {
  id            Int    @id @default(autoincrement())
  setting_key   String @db.VarChar(255)
  setting_value String @db.VarChar(255)

  @@map("settings")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  password      String
  image         String?
  role_id       Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  bookings Booking[]
  logs     Log[]
  sessions      Session[]
  roles    Role?     @relation(fields: [role_id], references: [id], onUpdate: NoAction)

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Penalty {
  id          Int       @id @default(autoincrement())
  description String    @db.VarChar(255)
  amount      Decimal   @db.Decimal(10, 2)
  booking_id  Int
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  bookings    Booking   @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("penalties")
}
